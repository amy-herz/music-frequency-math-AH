{"ast":null,"code":"var _jsxFileName = \"/Users/amy/job search career/coding challenges/Go Nimbly 2020/interviewProject_FrequencyMath/frequency-math/src/App.js\";\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport 'bootswatch/dist/solar/bootstrap.min.css';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {//resultFrequency = []\n    };\n  }\n\n  // button is pressed, read user input\n  // pass to component that builds the url dynamically given factors\n  // url passed here \n  componentDidMount() {\n    axios.get('https://newton.now.sh/simplify/').then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    /*  TODO: implement a loading spinner\n    if(!this.props.title) {\n      return(null);\n    }\n    */\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"page-header\",\n      id: \"banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }, \"Note Frequency Math\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, \"Go Nimbly Interview Project by Amy Herz\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BaseInput, {\n      number: \"440\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SemiTones, {\n      number: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary btn-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, \"Calculate\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Results, {\n      number: \"440\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n/*  \n  Starting with a base of A4 with a nice integer note frequency of 440.\n  This frequency will remain unchanged as our point of reference.\n*/\n\n\nfunction BaseInput(props) {\n  const base = {\n    freq: \"440\",\n    note: \"A4\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    class: \"control-label\",\n    for: \"baseFrequency\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Base Frequency (in Hertz)\"), /*#__PURE__*/React.createElement(\"input\", {\n    class: \"form-control form-control-lg\",\n    type: \"text\",\n    placeholder: \"440\",\n    id: \"baseFrequency\",\n    readonly: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    id: \"baseFreqHelp\",\n    class: \"form-text text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"We are starting with the fifth A (A4) with a frequency of 440Hz\")));\n}\n/*  \n  From our base note, user provides number of semitones, or half steps to travel from there.\n  User can input positive number to travel up or negative number to travel down in pitch.\n*/\n\n\nfunction SemiTones(props) {\n  const semiTones = {\n    number: \"0\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    class: \"col-form-label col-form-label-lg\",\n    for: \"userInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Semitones\"), /*#__PURE__*/React.createElement(\"input\", {\n    class: \"form-control form-control-lg\",\n    type: \"text\",\n    placeholder: \"0\",\n    id: \"userInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    id: \"semitonesHelp\",\n    class: \"form-text text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Enter how many semitones, or half steps you would like to add or subtract from A4.\"));\n}\n/*  \n  Calculated resulting frequency/note to display along with other information.\n*/\n\n\nfunction Results(props) {\n  const result = {\n    freq: \"440\",\n    note: \"A4\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"card text-white bg-success mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    div: true,\n    class: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Results\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    class: \"card-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Consonance/Dissonance?\"), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"After calculating....\"), /*#__PURE__*/React.createElement(\"ul\", {\n    class: \"list-group list-group-flush\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    class: \"list-group-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Note: \"), /*#__PURE__*/React.createElement(\"li\", {\n    class: \"list-group-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"Frequency: \"), /*#__PURE__*/React.createElement(\"li\", {\n    class: \"list-group-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Fraction: \")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    class: \"btn btn-outline-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"Play note\"))));\n}\n\nclass ResultCalculation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      calculatedFrequency: []\n    };\n    this.state = {\n      value: 440 // begin with result equaling our initial note, A, at 440Hz\n\n    };\n  }\n\n  componentDidMount() {\n    fetch().then(res => res.json()).then(data => {\n      this.setState({\n        calculatedFrequency: data\n      });\n    }).catch(console.log);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amy/job search career/coding challenges/Go Nimbly 2020/interviewProject_FrequencyMath/frequency-math/src/App.js"],"names":["React","Component","axios","App","state","componentDidMount","get","then","response","console","log","catch","error","render","BaseInput","props","base","freq","note","SemiTones","semiTones","number","Results","result","ResultCalculation","constructor","calculatedFrequency","value","fetch","res","json","data","setState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport 'bootswatch/dist/solar/bootstrap.min.css'; \nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    //resultFrequency = []\n  };\n\n// button is pressed, read user input\n// pass to component that builds the url dynamically given factors\n// url passed here \n  componentDidMount() {\n    axios\n      .get('https://newton.now.sh/simplify/')\n      .then(function(response) {\n        console.log(response);\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n  }\n  \n  render() {\n    /*  TODO: implement a loading spinner\n    if(!this.props.title) {\n      return(null);\n    }\n    */\n    return(\n      <div>\n        <div class=\"page-header\" id=\"banner\">\n          <h1>Note Frequency Math</h1>\n          <p>Go Nimbly Interview Project by Amy Herz</p>\n        </div>\n        <div class=\"jumbotron\">\n          <div class=\"form-group\">\n            <BaseInput number=\"440\" />\n            <SemiTones number=\"1\" />\n            <button type=\"button\" class=\"btn btn-primary btn-lg\">Calculate</button>\n          </div>\n          <div class=\"form-group\">\n            <Results number=\"440\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*  \n  Starting with a base of A4 with a nice integer note frequency of 440.\n  This frequency will remain unchanged as our point of reference.\n*/\nfunction BaseInput(props) {\n  const base = {freq:\"440\", note:\"A4\"};\n  return (\n    <div class=\"form-group\">\n      <fieldset>\n        <label class=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)</label>\n        <input class=\"form-control form-control-lg\" type=\"text\" placeholder=\"440\" id=\"baseFrequency\" readonly=\"\"></input>\n        <small id=\"baseFreqHelp\" class=\"form-text text-muted\">We are starting with the fifth A (A4) with a frequency of 440Hz</small>\n      </fieldset>\n    </div>\n  );\n}\n\n/*  \n  From our base note, user provides number of semitones, or half steps to travel from there.\n  User can input positive number to travel up or negative number to travel down in pitch.\n*/\nfunction SemiTones(props) {\n  const semiTones = {number:\"0\"};\n  return (\n    <div>\n      <label class=\"col-form-label col-form-label-lg\" for=\"userInput\">Semitones</label>\n      <input class=\"form-control form-control-lg\" type=\"text\" placeholder=\"0\" id=\"userInput\"></input>\n      <small id=\"semitonesHelp\" class=\"form-text text-muted\">Enter how many semitones, or half steps you would like to add or subtract from A4.</small>\n    </div>\n  );\n}\n\n/*  \n  Calculated resulting frequency/note to display along with other information.\n*/\nfunction Results(props) {\n  const result = {freq:\"440\", note:\"A4\"};\n  return (\n    <div class=\"card text-white bg-success mb-3\">\n      <h3 div class=\"card-header\">Results</h3>\n      <div class=\"card-body\">\n        <h4 class=\"card-title\">Consonance/Dissonance?</h4>\n        <p class=\"card-text\">After calculating....</p>\n        <ul class=\"list-group list-group-flush\">\n          <li class=\"list-group-item\">Note: </li>\n          <li class=\"list-group-item\">Frequency: </li>\n          <li class=\"list-group-item\">Fraction: </li>\n        </ul>\n        <div class=\"card-body\">\n          <button type=\"button\" class=\"btn btn-outline-success\">Play note</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nclass ResultCalculation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 440,   // begin with result equaling our initial note, A, at 440Hz\n    };\n  }\n  \n  state = {\n    calculatedFrequency: []\n  }\n\n  componentDidMount() {\n    fetch()\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ calculatedFrequency: data })\n    })\n    .catch(console.log)\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}