{"ast":null,"code":"var _jsxFileName = \"/Users/amy/job search career/coding challenges/Go Nimbly 2020/interviewProject_FrequencyMath/frequency-math/src/App.js\";\nimport React, { Component } from 'react';\nimport { PolySynth, Tone } from 'tone'; //import ReactDOM from 'react-dom';\n\nimport 'bootswatch/dist/solar/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    /*  TODO: implement a loading spinner\n    if(!this.props.title) {\n      return(null);\n    }\n    */\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"body\", {\n      class: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-header\",\n      id: \"banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-lg-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 19\n      }\n    }, \"Note Frequency Math\"), /*#__PURE__*/React.createElement(\"p\", {\n      class: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 19\n      }\n    }, \"Go Nimbly Interview Project by Amy Herz\")))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"bs-docs-section clearfix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(SemitonesForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 19\n      }\n    }))))));\n  }\n\n}\n/*  \n  Starting with a base of A4 with a nice integer note frequency of 440.\n  This frequency will remain unchanged as our point of reference.\n  Might eventually put this back as it's own component but right now it's in the form\n\nfunction BaseInput(props) {\n  const base = {freq:\"440\", note:\"A4\"};\n  return (\n    <div className=\"form-group\">\n      <fieldset>\n        <label className=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)</label>\n        <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"440\" id=\"baseFrequency\" readOnly={true} value=\"440\"></input>\n        <small id=\"baseFreqHelp\" className=\"form-text text-muted\">We are starting with the \"Middle A\" (A4) with a frequency of 440Hz</small>\n      </fieldset>\n    </div>\n  );\n}\n*/\n\n/*\n  Simple function to set state of other class and pass to results\n*/\n\n\nfunction updateResults(freq) {\n  this.setState({\n    freq\n  });\n}\n/*  \n  From our base note, user provides number of semitones, or half steps to travel from there.\n  User can input positive number to travel up or negative number to travel down in pitch.\n*/\n\n\nclass SemitonesForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: 0,\n      note: \"A4\",\n      // user inputted number of semitones\n      frequency: 440,\n      // frequency of resulting note\n      logResult: 0,\n      // result of log newton API call\n      pianoKey: 49,\n      // key number on piano\n      isLoading: false,\n      // true/false if component is loading\n      error: null,\n      // in case there is an error to display\n      displayResults: false // render when results are ready\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this); //this.calculateFrequency = this.calculateFrequency.bind(this);\n    //this.synth = new Tone.AMSynth().toMaster();\n    //this.tone = new Tone.Frequency(\"A4\")\n\n    this.synth = new PolySynth(2).toMaster(); //var synth = new Tone.Synth().toMaster()\n  }\n\n  handleChange(event) {\n    this.setState({\n      number: event.target.value\n    });\n  }\n  /*\n  calculateFrequency() {\n    console.log('current state.number entering freq calc:' + this.state.number);\n    this.setState({frequency: 440 * Math.pow(2, (this.state.number / 12))});\n  }\n  */\n\n\n  handleSubmit(event) {\n    this.setState({\n      isLoading: true\n    }); //this.calculateFrequency();\n\n    console.log('current state.number entering freq calc:' + this.state.number); //this.setState({frequency: 440 * Math.pow(2, (this.state.number / 12))});\n\n    const freq = 440 * Math.pow(2, this.state.number / 12); // additional step to round to two decimal places for readability\n\n    const freqRounded = Number(Math.round(parseFloat(freq + 'e' + 2)) + 'e-' + 2);\n    this.setState({\n      frequency: freqRounded\n    });\n    console.log('this.state.frequency: ' + this.state.frequency); //const midi = this.tone.Frequency.ftom(freqRounded);  // this gives us the midi equivalent of freq\n    //const SPINote = this.tone.Frequency(midi, 'midi').toNote(); // this returns the note\n    //this.setState({note: SPINote});\n\n    const freqDivide = freq / 440;\n    console.log('freqDivide: ' + freqDivide);\n    const newtonBase = 'https://newton.now.sh/'; // base url for newton API calls\n\n    fetch(newtonBase + 'log/2|' + freqDivide).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong...');\n      }\n    }).then(logResults => {\n      this.setState({\n        logResult: logResults.result\n      });\n      console.log('log result: ', logResults);\n      console.log('this.state.logResult: ' + this.state.logResult);\n      const key = 12 * this.state.logResult + 49;\n      this.setState({\n        pianoKey: key,\n        isLoading: false,\n        displayResults: true\n      });\n      console.log('this.pianoKey: ' + this.state.pianoKey);\n    }, error => {\n      console.log(error); //console.log('error response: ' + error.response);\n\n      console.log('error status: ' + error.response.status);\n      this.setState({\n        error,\n        isLoading: false,\n        displayResults: false\n      });\n    });\n    event.preventDefault();\n  }\n  /*\n  passToResults(event) {\n    updateResults(event.target.value);\n  }\n  */\n\n  /*\n    For playing our tone.js synth with the notes we have from results\n  */\n\n\n  handleClick() {\n    //var synth = new Tone.Synth().toMaster()\n    //this.synth.triggerAttackRelease('A4', '4n')\n    this.synth.triggerAttackRelease('440', '2n');\n    this.synth.triggerAttackRelease(this.state.frequency, '2n', \"+2\");\n    this.synth.triggerAttackRelease(['440', this.state.frequency], '1n', \"+4\");\n    /*\n    document.querySelector('tone-keyboard').addEventListener('noteon', e=> {\n      synth.triggerAttack(e.detail.name)\n    })\n     document.querySelector('tone-keyboard').addEventListener('noteoff', e=> {\n      synth.triggerRelease()\n    })\n    */\n  }\n\n  render() {\n    const {\n      isLoading,\n      error,\n      displayResults\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 14\n        }\n      }, error.message);\n    }\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"blockquote\", {\n        class: \"blockquote text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        class: \"mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      }, \"Loading...\"));\n    }\n\n    if (displayResults) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"control-label\",\n        for: \"baseFrequency\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }\n      }, \"Base Frequency (in Hertz)\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"form-control form-control-lg\",\n        type: \"number\",\n        placeholder: \"440\",\n        id: \"baseFrequency\",\n        readOnly: true,\n        value: \"440\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"small\", {\n        id: \"baseFreqHelp\",\n        className: \"form-text text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }\n      }, \"We are starting with the \\\"Middle A\\\" (A4) with a frequency of 440Hz\")), /*#__PURE__*/React.createElement(\"fieldset\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"control-label\",\n        for: \"userInput\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }\n      }, \"Semitones\", /*#__PURE__*/React.createElement(\"input\", {\n        className: \"form-control form-control-lg\",\n        type: \"number\",\n        placeholder: \"0\",\n        id: \"userInput\",\n        min: \"-57\",\n        max: \"50\",\n        step: \"1\",\n        value: this.state.number,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"small\", {\n        id: \"semitonesHelp\",\n        className: \"form-text text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }\n      }, \"Enter how many semitones, or half steps you would like to add or subtract from A4 (integer numbers only ranging from -57 to 50).\")), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-lg btn-block\",\n        value: \"Calculate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"hr\", {\n        class: \"my-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"card border-success mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        div: true,\n        class: \"card-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }\n      }, \"Results\"), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        class: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }\n      }, \"Consonance/Dissonance?\"), /*#__PURE__*/React.createElement(\"p\", {\n        class: \"card-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }\n      }, \"After calculating....\"), /*#__PURE__*/React.createElement(\"table\", {\n        class: \"table table-dark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }\n      }, \"Characteristic\"), /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }\n      }, \"First Note\"), /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }\n      }, \"Second Note\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        class: \"table-default\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }\n      }, \"Frequency\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }\n      }, \"440\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }\n      }, this.state.frequency)), /*#__PURE__*/React.createElement(\"tr\", {\n        class: \"table-default\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      }, \"Key on Piano\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }\n      }, \"49\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }\n      }, this.state.pianoKey)))), /*#__PURE__*/React.createElement(\"ul\", {\n        class: \"list-group list-group-flush\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        class: \"list-group-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }\n      }, \"Key on Piano: \", this.state.pianoKey), /*#__PURE__*/React.createElement(\"li\", {\n        class: \"list-group-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }\n      }, \"Frequency: \", this.state.frequency)), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        class: \"btn btn-secondary\",\n        onClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 17\n        }\n      }, \"Play notes\")))))\n      /* section for our synth if we put it in\n      <iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/yotammann/uLkcsrxn/embedded/result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\" onclick={this.handleClick}></iframe>\n      \n      <script async src=\"//jsfiddle.net/yotammann/uLkcsrxn/embed/js,html,css,result/dark/\"></script>\n      \n        <script src=\"https://unpkg.com/@webcomponents/webcomponentsjs@^2/webcomponents-bundle.js\"></script>\n        <script src=\"https://unpkg.com/tone\"></script>\n        <script src=\"https://unpkg.com/@tonejs/ui\"></script>\n         <tone-demo autoplay></tone-demo>\n      </script>\n      \n      \n      <iframe src=\"https://jsfiddle.net/spzgucvw/embedded/js,result/?username=yotammann\" id=\"JSFEMB_18424\" width=\"100%\" height=\"250\" frameborder=\"0\" sandbox=\"allow-modals allow-forms allow-same-origin allow-scripts allow-popups allow-top-navigation-by-user-activation allow-downloads\" allow=\"midi; geolocation; microphone; camera; display-capture; encrypted-media;\" class=\"active-iframe\">\n        #document\n        <!DOCTYPE html>\n        <html>\n          <head>\n            Play on tone.js synth\n          </head>\n          <body>\n            <div id=\"full-embed\">\n              <script src=\"https://unpkg.com/@webcomponents/webcomponentsjs@^2/webcomponents-bundle.js\"></script>\n              <script src=\"https://unpkg.com/tone\"></script>\n              <script src=\"https://unpkg.com/@tonejs/ui\"></script>\n              <tone-demo autoplay>\n                <tone-keyboard octaves=\"3\"></tone-keyboard>\n              </tone-demo>\n            </div>\n          </body>\n        </html>\n      </iframe>\n      */\n      ;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"bs-component\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"control-label\",\n      for: \"baseFrequency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }\n    }, \"Base Frequency (in Hertz)\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control form-control-lg\",\n      type: \"number\",\n      placeholder: \"440\",\n      id: \"baseFrequency\",\n      readOnly: true,\n      value: \"440\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      id: \"baseFreqHelp\",\n      className: \"form-text text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 15\n      }\n    }, \"We are starting with the \\\"Middle A\\\" (A4) with a frequency of 440Hz\")))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"bs-component\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"col-form-label col-form-label-lg\",\n      for: \"userInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 15\n      }\n    }, \"Semitones\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control form-control-lg\",\n      type: \"number\",\n      placeholder: \"0\",\n      id: \"userInput\",\n      min: \"-57\",\n      max: \"50\",\n      step: \"1\",\n      value: this.state.number,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"small\", {\n      id: \"semitonesHelp\",\n      className: \"form-text text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 15\n      }\n    }, \"Enter how many semitones, or half steps you would like to add or subtract from A4 (integer numbers only ranging from -57 to 50).\")))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-lg-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"bs-component\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-primary btn-lg btn-block\",\n      value: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n/*  \n  After user submits form, results are rendered and displayed in this component.\n  Future state: put this back as a separate component\n\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {freq: 440, note: \"A4\", pianoKey: 49, ratio: \"1\"};\n\n    this.handleClick = this.handleClick.bind(this);\n    updateResults = updateResults.bind(this);\n  }\n  \n  handleClick() {\n    this.setState(state => ({\n      //axios shit\n    }));\n  }\n\n  render() {\n    return (\n      <div class=\"card text-white bg-success mb-3\">\n        <h3 div class=\"card-header\">Results</h3>\n        <div class=\"card-body\">\n          <h4 class=\"card-title\">Consonance/Dissonance?</h4>\n          <p class=\"card-text\">After calculating....</p>\n          <ul class=\"list-group list-group-flush\">\n            <li class=\"list-group-item\">Note: {this.state.note}</li>\n            <li class=\"list-group-item\">Key on Piano: {this.state.pianoKey}</li>\n            <li class=\"list-group-item\">Frequency: {this.state.freq}</li>\n            <li class=\"list-group-item\">Fraction: {this.state.ratio}</li>\n          </ul>\n          <div class=\"card-body\">\n            <button type=\"button\" class=\"btn btn-outline-success\" onClick={this.handleClick}>\n              Play notes</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/Users/amy/job search career/coding challenges/Go Nimbly 2020/interviewProject_FrequencyMath/frequency-math/src/App.js"],"names":["React","Component","PolySynth","Tone","App","render","updateResults","freq","setState","SemitonesForm","constructor","props","state","number","note","frequency","logResult","pianoKey","isLoading","error","displayResults","handleChange","bind","handleSubmit","handleClick","synth","toMaster","event","target","value","console","log","Math","pow","freqRounded","Number","round","parseFloat","freqDivide","newtonBase","fetch","then","response","ok","json","Error","logResults","result","key","status","preventDefault","triggerAttackRelease","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { PolySynth, Tone } from 'tone';\n//import ReactDOM from 'react-dom';\nimport 'bootswatch/dist/solar/bootstrap.min.css'; \nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    /*  TODO: implement a loading spinner\n    if(!this.props.title) {\n      return(null);\n    }\n    */\n    return(\n      <div>\n        <body class>\n          <div class=\"container\">\n            <div className=\"page-header\" id=\"banner\">\n              <div class=\"row\">\n                <div class=\"col-lg-8\">\n                  <h1>Note Frequency Math</h1>\n                  <p class=\"lead\">Go Nimbly Interview Project by Amy Herz</p>\n                </div>\n              </div>\n            </div>\n            <div class=\"bs-docs-section clearfix\">\n              <div className=\"jumbotron\">\n                  <SemitonesForm />\n              </div>\n            </div>\n          </div>\n        </body>\n      </div>\n    );\n  }\n}\n\n/*  \n  Starting with a base of A4 with a nice integer note frequency of 440.\n  This frequency will remain unchanged as our point of reference.\n  Might eventually put this back as it's own component but right now it's in the form\n\nfunction BaseInput(props) {\n  const base = {freq:\"440\", note:\"A4\"};\n  return (\n    <div className=\"form-group\">\n      <fieldset>\n        <label className=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)</label>\n        <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"440\" id=\"baseFrequency\" readOnly={true} value=\"440\"></input>\n        <small id=\"baseFreqHelp\" className=\"form-text text-muted\">We are starting with the \"Middle A\" (A4) with a frequency of 440Hz</small>\n      </fieldset>\n    </div>\n  );\n}\n*/\n\n/*\n  Simple function to set state of other class and pass to results\n*/\nfunction updateResults(freq) {\n  this.setState({freq})\n}\n\n/*  \n  From our base note, user provides number of semitones, or half steps to travel from there.\n  User can input positive number to travel up or negative number to travel down in pitch.\n*/\nclass SemitonesForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: 0,\n      note: \"A4\",              // user inputted number of semitones\n      frequency: 440,         // frequency of resulting note\n      logResult: 0,           // result of log newton API call\n      pianoKey: 49,           // key number on piano\n      isLoading: false,       // true/false if component is loading\n      error: null,            // in case there is an error to display\n      displayResults: false   // render when results are ready\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    //this.calculateFrequency = this.calculateFrequency.bind(this);\n\n    //this.synth = new Tone.AMSynth().toMaster();\n    //this.tone = new Tone.Frequency(\"A4\")\n    this.synth = new PolySynth(2).toMaster()\n    //var synth = new Tone.Synth().toMaster()\n  }\n\n  handleChange(event) {\n    this.setState({number: event.target.value});\n  }\n  /*\n  calculateFrequency() {\n    console.log('current state.number entering freq calc:' + this.state.number);\n    this.setState({frequency: 440 * Math.pow(2, (this.state.number / 12))});\n  }\n*/\n  handleSubmit(event) {\n    this.setState({isLoading: true});\n    //this.calculateFrequency();\n    console.log('current state.number entering freq calc:' + this.state.number);\n    //this.setState({frequency: 440 * Math.pow(2, (this.state.number / 12))});\n    \n    const freq = 440 * Math.pow(2, (this.state.number / 12));\n    // additional step to round to two decimal places for readability\n    const freqRounded = Number(Math.round(parseFloat(freq + 'e' + 2)) + 'e-' + 2);\n    this.setState({frequency: freqRounded});\n    console.log('this.state.frequency: ' + this.state.frequency);\n    //const midi = this.tone.Frequency.ftom(freqRounded);  // this gives us the midi equivalent of freq\n    //const SPINote = this.tone.Frequency(midi, 'midi').toNote(); // this returns the note\n    //this.setState({note: SPINote});\n\n    const freqDivide = freq / 440;\n    console.log('freqDivide: ' + freqDivide);\n\n    const newtonBase = 'https://newton.now.sh/';  // base url for newton API calls\n    fetch(newtonBase + 'log/2|' + freqDivide)\n    .then(response => {\n      if(response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong...');\n      }\n    }) \n    .then(\n      (logResults) => {\n        this.setState({logResult: logResults.result});\n        console.log('log result: ', logResults);\n        console.log('this.state.logResult: ' + this.state.logResult);\n        const key = 12 * this.state.logResult + 49;\n        this.setState({\n          pianoKey: key,\n          isLoading: false,\n          displayResults: true\n        });\n        console.log('this.pianoKey: ' + this.state.pianoKey);\n      },\n      (error) => {\n        console.log(error);\n        //console.log('error response: ' + error.response);\n        console.log('error status: ' + error.response.status);\n        this.setState({\n          error,\n          isLoading: false,\n          displayResults: false\n        });\n      }\n    )\n    event.preventDefault();\n  }\n  /*\n  passToResults(event) {\n    updateResults(event.target.value);\n  }\n*/\n  /*\n    For playing our tone.js synth with the notes we have from results\n  */\n  handleClick() {\n    //var synth = new Tone.Synth().toMaster()\n    //this.synth.triggerAttackRelease('A4', '4n')\n    this.synth.triggerAttackRelease('440', '2n')\n    this.synth.triggerAttackRelease(this.state.frequency, '2n', \"+2\")\n    this.synth.triggerAttackRelease(['440', this.state.frequency], '1n', \"+4\")\n    /*\n    document.querySelector('tone-keyboard').addEventListener('noteon', e=> {\n      synth.triggerAttack(e.detail.name)\n    })\n\n    document.querySelector('tone-keyboard').addEventListener('noteoff', e=> {\n      synth.triggerRelease()\n    })\n    */\n  }\n\n  render() {\n    const { isLoading, error, displayResults } = this.state;\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    if (isLoading) {\n      return (\n        <blockquote class=\"blockquote text-center\">\n          <h2 class=\"mb-0\">Loading...</h2>\n        </blockquote>\n      );\n    }\n\n    if (displayResults) {\n      return (\n        <div>\n        {/* section for our form */}\n          <form onSubmit={this.handleSubmit}>\n            <fieldset>\n              <label className=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)</label>\n              <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"440\" id=\"baseFrequency\" readOnly={true} value=\"440\"></input>\n              <small id=\"baseFreqHelp\" className=\"form-text text-muted\">We are starting with the \"Middle A\" (A4) with a frequency of 440Hz</small>\n            </fieldset>\n            <fieldset>\n              <label className=\"control-label\" for=\"userInput\">Semitones\n              {/*The musical scale goes from C0 to B8, giving us the range of -57 to 50 for semitones options*/}\n                <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"0\" id=\"userInput\" min=\"-57\" max=\"50\" step=\"1\" value={this.state.number} onChange={this.handleChange}></input>\n              </label>\n              <small id=\"semitonesHelp\" className=\"form-text text-muted\">Enter how many semitones, or half steps you would like to add or subtract from A4 (integer numbers only ranging from -57 to 50).</small>\n            </fieldset>\n            <br></br>\n            <input type=\"submit\" className=\"btn btn-primary btn-lg btn-block\" value=\"Calculate\" />\n          </form>\n          <hr class=\"my-4\" />\n          {/* section for our results card */}\n          <div class=\"card border-success mb-3\">\n            <h3 div class=\"card-header\">Results</h3>\n            <div class=\"card-body\">\n              <h4 class=\"card-title\">Consonance/Dissonance?</h4>\n              <p class=\"card-text\">After calculating....</p>\n              <table class=\"table table-dark\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Characteristic</th>\n                    <th scope=\"col\">First Note</th>\n                    <th scope=\"col\">Second Note</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr class=\"table-default\">\n                    <td>Frequency</td>\n                    <td>440</td>\n                    <td>{this.state.frequency}</td>\n                  </tr>\n                  <tr class=\"table-default\">\n                    <td>Key on Piano</td>\n                    <td>49</td>\n                    <td>{this.state.pianoKey}</td>\n                  </tr>\n                </tbody>\n              </table>\n\n              <ul class=\"list-group list-group-flush\">\n                {/* future: get these working\n                <li class=\"list-group-item\">Note: {this.state.note}</li>\n                <li class=\"list-group-item\">Fraction: {this.state.ratio}</li>\n                */}\n                <li class=\"list-group-item\">Key on Piano: {this.state.pianoKey}</li>\n                <li class=\"list-group-item\">Frequency: {this.state.frequency}</li>\n              </ul>\n              <div class=\"card-body\">\n                <button type=\"button\" class=\"btn btn-secondary\" onClick={this.handleClick}>\n                  Play notes</button>\n              </div>\n            </div>\n          </div>\n        </div>\n        /* section for our synth if we put it in\n        <iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/yotammann/uLkcsrxn/embedded/result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\" onclick={this.handleClick}></iframe>\n        \n        <script async src=\"//jsfiddle.net/yotammann/uLkcsrxn/embed/js,html,css,result/dark/\"></script>\n        \n          <script src=\"https://unpkg.com/@webcomponents/webcomponentsjs@^2/webcomponents-bundle.js\"></script>\n          <script src=\"https://unpkg.com/tone\"></script>\n          <script src=\"https://unpkg.com/@tonejs/ui\"></script>\n\n          <tone-demo autoplay></tone-demo>\n        </script>\n        \n        \n        <iframe src=\"https://jsfiddle.net/spzgucvw/embedded/js,result/?username=yotammann\" id=\"JSFEMB_18424\" width=\"100%\" height=\"250\" frameborder=\"0\" sandbox=\"allow-modals allow-forms allow-same-origin allow-scripts allow-popups allow-top-navigation-by-user-activation allow-downloads\" allow=\"midi; geolocation; microphone; camera; display-capture; encrypted-media;\" class=\"active-iframe\">\n          #document\n          <!DOCTYPE html>\n          <html>\n            <head>\n              Play on tone.js synth\n            </head>\n            <body>\n              <div id=\"full-embed\">\n                <script src=\"https://unpkg.com/@webcomponents/webcomponentsjs@^2/webcomponents-bundle.js\"></script>\n                <script src=\"https://unpkg.com/tone\"></script>\n                <script src=\"https://unpkg.com/@tonejs/ui\"></script>\n                <tone-demo autoplay>\n                  <tone-keyboard octaves=\"3\"></tone-keyboard>\n                </tone-demo>\n              </div>\n            </body>\n          </html>\n        </iframe>\n        */\n      );\n    }\n\n    return (\n      <div class=\"row\">\n        <form onSubmit={this.handleSubmit}>\n          <div class=\"col-lg-4\">\n            <div class=\"bs-component\">\n            <fieldset>\n              <label className=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)</label>\n              <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"440\" id=\"baseFrequency\" readOnly={true} value=\"440\"></input>\n              <small id=\"baseFreqHelp\" className=\"form-text text-muted\">We are starting with the \"Middle A\" (A4) with a frequency of 440Hz</small>\n            </fieldset>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <div class=\"bs-component\">\n            <fieldset>\n              <label className=\"col-form-label col-form-label-lg\" for=\"userInput\">Semitones\n                {/*The musical scale goes from C0 to B8, giving us the range of -57 to 50 for semitones options*/}\n                <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"0\" id=\"userInput\" min=\"-57\" max=\"50\" step=\"1\" value={this.state.number} onChange={this.handleChange}></input>\n              </label>\n              <small id=\"semitonesHelp\" className=\"form-text text-muted\">Enter how many semitones, or half steps you would like to add or subtract from A4 (integer numbers only ranging from -57 to 50).</small>\n            </fieldset>\n            </div>\n          </div>\n          <div class=\"col-lg-4\">\n            <div class=\"bs-component\">\n              <input type=\"submit\" className=\"btn btn-primary btn-lg btn-block\" value=\"Calculate\"></input>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  } \n}\n\n\n/*  \n  After user submits form, results are rendered and displayed in this component.\n  Future state: put this back as a separate component\n\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {freq: 440, note: \"A4\", pianoKey: 49, ratio: \"1\"};\n\n    this.handleClick = this.handleClick.bind(this);\n    updateResults = updateResults.bind(this);\n  }\n  \n  handleClick() {\n    this.setState(state => ({\n      //axios shit\n    }));\n  }\n\n  render() {\n    return (\n      <div class=\"card text-white bg-success mb-3\">\n        <h3 div class=\"card-header\">Results</h3>\n        <div class=\"card-body\">\n          <h4 class=\"card-title\">Consonance/Dissonance?</h4>\n          <p class=\"card-text\">After calculating....</p>\n          <ul class=\"list-group list-group-flush\">\n            <li class=\"list-group-item\">Note: {this.state.note}</li>\n            <li class=\"list-group-item\">Key on Piano: {this.state.pianoKey}</li>\n            <li class=\"list-group-item\">Frequency: {this.state.freq}</li>\n            <li class=\"list-group-item\">Fraction: {this.state.ratio}</li>\n          </ul>\n          <div class=\"card-body\">\n            <button type=\"button\" class=\"btn btn-outline-success\" onClick={this.handleClick}>\n              Play notes</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}