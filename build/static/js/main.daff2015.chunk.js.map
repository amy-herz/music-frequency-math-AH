{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","class","className","id","Component","SemitonesForm","props","state","number","note","frequency","logResult","pianoKey","isLoading","error","displayResults","handleChange","bind","handleSubmit","handleClick","synth","PolySynth","toMaster","event","this","setState","target","value","freq","Math","pow","freqRounded","Number","round","parseFloat","fetch","newtonBase","then","response","ok","json","Error","logResults","result","console","log","key","status","preventDefault","triggerAttackRelease","message","onSubmit","for","type","placeholder","readOnly","min","max","step","onChange","div","scope","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.daff2015.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { PolySynth } from 'tone';\n//import ReactDOM from 'react-dom';\nimport 'bootswatch/dist/solar/bootstrap.min.css'; \nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return(\n      <div>\n        <body class>\n          <div class=\"container\">\n            <div className=\"page-header\" id=\"banner\">\n              <div class=\"row\">\n                <div class=\"col-lg-8\">\n                  <h1>Note Frequency Math</h1>\n                  <p class=\"lead\">Go Nimbly Interview Project by Amy Herz</p>\n                </div>\n              </div>\n            </div>\n            <div class=\"bs-docs-section clearfix\">\n              <div className=\"jumbotron\">\n                  <p>The octave in music is comprised of 12 notes, each note \n                   corresponding to a frequency or pitch measured in Hertz. How do we measure \n                   the pleasantness or consonance of two notes together? </p>\n                   <p>It is not a matter of opinion but rather math! The frequency of \n                   the highest note in an octave is exactly twice that of the lowest note in the octave.\n                    This creates a <em>geometric sequence</em> when you keep going by octaves. If you \n                    took a string and plucked it, and then halved it and plucked it again, you would have a \n                    doubled frequency.</p>\n                  <p>As you then break down the other 12 semitones between the octave, you get different \n                    ratios between each note but what creates <strong>harmonics</strong> is an additive\n                    step rather than a multiplicative, making it an <em>arithmetic sequence</em>. \n                    To explain, if you plucked a string again and watched it vibrate in slow motion, \n                    you would see that it vibrates in many modes with the main one being the first harmonic, \n                    giving the note its specified frequency. The string can also vibrate in higher modes, \n                    or harmonics, at various times or simultaneously, with the sequence of these harmonics \n                    forming the arithmetic sequence.\n                  </p>\n                  <h3>Plug in a number of semitones to go from our base note A4 at 440Hz, and then \n                    view the results to determine whether the two notes are more consonant or disonant.\n                  </h3>\n                  <hr class=\"my-4\" />\n                  <SemitonesForm />\n              </div>\n            </div>\n          </div>\n        </body>\n      </div>\n    );\n  }\n}\n\n/*  \n  Starting with a base of A4 with a nice integer note frequency of 440.\n  This frequency will remain unchanged as our point of reference.\n  Might eventually put this back as it's own component but right now it's in the form\n\nfunction BaseInput(props) {\n  const base = {freq:\"440\", note:\"A4\"};\n  return (\n    <div className=\"form-group\">\n      <fieldset>\n        <label className=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)</label>\n        <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"440\" id=\"baseFrequency\" readOnly={true} value=\"440\"></input>\n        <small id=\"baseFreqHelp\" className=\"form-text text-muted\">We are starting with the \"Middle A\" (A4) with a frequency of 440Hz</small>\n      </fieldset>\n    </div>\n  );\n}\n*/\n\n/*\n  Simple function to set state of other class and pass to results\n\nfunction updateResults(freq) {\n  this.setState({freq})\n}\n*/\n\n/*  \n  From our base note, user provides number of semitones, or half steps to travel from there.\n  User can input positive number to travel up or negative number to travel down in pitch.\n*/\nclass SemitonesForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: 0,\n      note: \"A4\",              // user inputted number of semitones\n      frequency: 440,         // frequency of resulting note\n      logResult: 0,           // result of log newton API call\n      pianoKey: 49,           // key number on piano\n      isLoading: false,       // true/false if component is loading\n      error: null,            // in case there is an error to display\n      displayResults: false   // render when results are ready\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    //this.calculateFrequency = this.calculateFrequency.bind(this);\n\n    //this.tone = new Tone.Frequency(\"A4\")\n    this.synth = new PolySynth(2).toMaster()\n    //var synth = new Tone.Synth().toMaster()\n  }\n\n  handleChange(event) {\n    this.setState({number: event.target.value});\n  }\n\n  handleSubmit(event) {\n    this.setState({isLoading: true});\n\n    // first we need to calculate the frequency of the second number\n    const freq = 440 * Math.pow(2, (this.state.number / 12));\n    // additional step to round to two decimal places for readability in component\n    const freqRounded = Number(Math.round(parseFloat(freq + 'e' + 2)) + 'e-' + 2);\n    this.setState({frequency: freqRounded});\n    //console.log('this.state.frequency: ' + this.state.frequency);\n    const freqDivide = freq / 440;\n    //console.log('freqDivide: ' + freqDivide);\n    \n    // future steps, getting Tone.Frequency() for additional info\n    //const midi = this.tone.Frequency.ftom(freqRounded);  // this gives us the midi equivalent of freq\n    //const SPINote = this.tone.Frequency(midi, 'midi').toNote(); // this returns the note\n    //this.setState({note: SPINote});\n\n    // base url for newton API calls\n    const newtonBase = 'https://newton.now.sh/';  \n    // get from API, using log function to get piano key\n    fetch(newtonBase + 'log/2|' + freqDivide)\n    .then(response => {\n      if(response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong...');\n      }\n    }) \n    .then(\n      (logResults) => {\n        this.setState({logResult: logResults.result});\n        console.log('log result: ', logResults);\n\n        const key = 12 * this.state.logResult + 49;\n        this.setState({\n          pianoKey: key,\n          isLoading: false,\n          displayResults: true\n        });\n        // console.log('state.pianoKey: ' + this.state.pianoKey);\n      },\n      (error) => {\n        console.log(error);\n        //console.log('error response: ' + error.response);\n        console.log('error status: ' + error.response.status);\n        this.setState({\n          error,\n          isLoading: false,\n          displayResults: false\n        });\n      }\n    )\n    event.preventDefault();\n  }\n  /*\n  passToResults(event) {\n    updateResults(event.target.value);\n  }\n*/\n  /*\n    For playing our tone.js PolySynth with the notes we have from results\n  */\n  handleClick() {\n    this.synth.triggerAttackRelease('440', '2n')\n    this.synth.triggerAttackRelease(this.state.frequency, '2n', \"+2\")\n    this.synth.triggerAttackRelease(['440', this.state.frequency], '1n', \"+4\")\n  }\n\n  render() {\n    const { isLoading, error, displayResults } = this.state;\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    if (isLoading) {\n      return (\n        <blockquote class=\"blockquote text-center\">\n          <h2 class=\"mb-0\">Loading...</h2>\n        </blockquote>\n      );\n    }\n\n    if (displayResults) {\n      return (\n        <div>\n        {/* section for our form */}\n          <div class=\"row\">\n            <form onSubmit={this.handleSubmit}>\n              <fieldset>\n                <div class=\"form-group row\">\n                  <div class=\"col-lg-4\">\n                    <label className=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)\n                      <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"440\" id=\"baseFrequency\" readOnly={true} value=\"440\"></input>\n                    </label>\n                    <small id=\"baseFreqHelp\" className=\"form-text text-muted\">\n                      We are starting with the \"Middle A\" (A4) with a frequency of 440Hz\n                    </small>\n                  </div>\n\n                  <div class=\"col-lg-4\">\n                    <label className=\"control-label\" for=\"userInput\">Semitones\n                      {/*The musical scale goes from C0 to B8, giving us the range of -57 to 50 for semitones options*/}\n                      <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"0\" id=\"userInput\" min=\"-57\" max=\"50\" step=\"1\" value={this.state.number} onChange={this.handleChange}></input>\n                    </label>\n                    <small id=\"semitonesHelp\" className=\"form-text text-muted\">\n                      Enter how many semitones you would like to add or subtract from A4 \n                      (integer numbers only ranging from -57 to 50).\n                    </small>\n                  </div>\n\n                  <div class=\"col-lg-3\">\n                    <br></br>\n                    <input type=\"submit\" className=\"btn btn-outline-primary btn-lg btn-block\" value=\"Calculate\" />\n                  </div>\n                </div>\n              </fieldset>\n            </form>\n          </div>\n\n          <hr class=\"my-4\" />\n          {/* section for our results card */}\n          <div class=\"card border-success mb-3\">\n            <h3 div class=\"card-header\">Results</h3>\n            <div class=\"card-body\">\n              <h4 class=\"card-title\">Consonance/Dissonance?</h4>\n              <p class=\"card-text\">After calculating....</p>\n              <table class=\"table table-secondary\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Characteristic</th>\n                    <th scope=\"col\">First Note</th>\n                    <th scope=\"col\">Second Note</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr class=\"table-dark\">\n                    <th scope=\"row\">Frequency</th>\n                    <td>440</td>\n                    <td>{this.state.frequency}</td>\n                  </tr>\n                  <tr class=\"table-dark\">\n                    <th scope=\"row\">Key on Piano</th>\n                    <td>49</td>\n                    <td>{this.state.pianoKey}</td>\n                  </tr>\n                </tbody>\n                {/* future: get these working, but in table\n                Note: {this.state.note}\n                Fraction: {this.state.ratio}\n                */}\n              </table>\n              <div class=\"card-body\">\n                <button type=\"button\" class=\"btn btn-outline-primary btn-block\" onClick={this.handleClick}>\n                  Play notes together</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div class=\"row\">\n        <form onSubmit={this.handleSubmit}>\n          <fieldset>\n            <div class=\"form-group row\">\n              <div class=\"col-lg-4\">\n                <label className=\"control-label\" for=\"baseFrequency\">Base Frequency (in Hertz)\n                  <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"440\" id=\"baseFrequency\" readOnly={true} value=\"440\"></input>\n                </label>\n                <small id=\"baseFreqHelp\" className=\"form-text text-muted\">\n                  We are starting with the \"Middle A\" (A4) with a frequency of 440Hz\n                </small>\n              </div>\n\n              <div class=\"col-lg-4\">\n                <label className=\"control-label\" for=\"userInput\">Semitones\n                  {/*The musical scale goes from C0 to B8, giving us the range of -57 to 50 for semitones options*/}\n                  <input className=\"form-control form-control-lg\" type=\"number\" placeholder=\"0\" id=\"userInput\" min=\"-57\" max=\"50\" step=\"1\" value={this.state.number} onChange={this.handleChange}></input>\n                </label>\n                <small id=\"semitonesHelp\" className=\"form-text text-muted\">\n                  Enter how many semitones you would like to add or subtract from A4 \n                  (integer numbers only ranging from -57 to 50).\n                </small>\n              </div>\n\n              <div class=\"col-lg-3\">\n                <br></br>\n                <input type=\"submit\" className=\"btn btn-outline-primary btn-lg btn-block\" value=\"Calculate\" />\n              </div>\n            </div>\n          </fieldset>\n        </form>\n      </div>\n    );\n  } \n}\n\n\n/*  \n  After user submits form, results are rendered and displayed in this component.\n  Future state: put this back as a separate component\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {freq: 440, note: \"A4\", pianoKey: 49, ratio: \"1\"};\n\n    this.handleClick = this.handleClick.bind(this);\n    updateResults = updateResults.bind(this);\n  }\n  \n  handleClick() {\n    this.setState(state => ({\n      //axios shit\n    }));\n  }\n\n  render() {\n    return (\n      <div class=\"card text-white bg-success mb-3\">\n        <h3 div class=\"card-header\">Results</h3>\n        <div class=\"card-body\">\n          <h4 class=\"card-title\">Consonance/Dissonance?</h4>\n          <p class=\"card-text\">After calculating....</p>\n          <ul class=\"list-group list-group-flush\">\n            <li class=\"list-group-item\">Note: {this.state.note}</li>\n            <li class=\"list-group-item\">Key on Piano: {this.state.pianoKey}</li>\n            <li class=\"list-group-item\">Frequency: {this.state.freq}</li>\n            <li class=\"list-group-item\">Fraction: {this.state.ratio}</li>\n          </ul>\n          <div class=\"card-body\">\n            <button type=\"button\" class=\"btn btn-outline-success\" onClick={this.handleClick}>\n              Play notes</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootswatch/dist/solar/bootstrap.min.css'; \n//import 'bootstrap/dist/css/bootstrap.css';  // currently not using\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}